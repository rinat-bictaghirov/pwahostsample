{"version":3,"sources":["./src/app/scanner-listener.component.ts","./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, EventEmitter, HostListener,  OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'my-scanner-listener',\r\n  template: ''\r\n})\r\nexport class ScannerListenerComponent implements OnInit {\r\n\r\n  @Output() onScanned = new EventEmitter<string>();\r\n  @Output() onScanFailed = new EventEmitter<any>();\r\n  mode = 'test-mode';\r\n\r\n  private lastKeyDownStamp: number = 0;\r\n  private keyboardInputStreak: string | undefined;\r\n\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  @HostListener('window:keydown', ['$event'])\r\n  keyInput(event: any) {\r\n\r\n    const t0 = this.lastKeyDownStamp;\r\n    this.lastKeyDownStamp = performance.now();\r\n    const time = this.lastKeyDownStamp - t0;\r\n    console.log(`ScannerListener[${this.mode}]::keyInput > got event`, event);\r\n    console.log(`ScannerListener[${this.mode}]::keyInput > time is`, time);\r\n\r\n    if (time > 1000) {\r\n      this.keyboardInputStreak = undefined;\r\n      console.log(`ScannerListener[${this.mode}]::keyInput > key time out`);\r\n    }\r\n    if (event.key === 'Enter') {\r\n      console.log(`ScannerListener[${this.mode}]::keyInput > found streak end key`);\r\n      if (!this.keyboardInputStreak) {\r\n        return;\r\n      }\r\n\r\n      console.log(`ScannerListener[${this.mode}]::keyInput > current streak is ${this.keyboardInputStreak}`);\r\n      let convertedInput = undefined;\r\n      const inputIsValid = this.modeMatchesScannedInputFormat(this.keyboardInputStreak);\r\n      console.log(`ScannerListener[${this.mode}]::keyInput > input was ${inputIsValid ? 'valid' : 'invalid'}`);\r\n      if (inputIsValid) {\r\n        convertedInput = this.convertRawInput(this.keyboardInputStreak);\r\n      }\r\n\r\n      if (convertedInput) {\r\n        this.onScanned.emit(convertedInput);\r\n      } else {\r\n        this.onScanFailed.emit(this.mode);\r\n      }\r\n      this.keyboardInputStreak = undefined;\r\n      return;\r\n    }\r\n\r\n    if (!isNaN(+event.key)) {\r\n      if (!this.keyboardInputStreak) {\r\n        this.keyboardInputStreak = event.key;\r\n      } else {\r\n        this.keyboardInputStreak += event.key;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.events.subscribe(hardwareEvents.barcodeScanned, (data) => {\r\n    //   let result = this.convertRawInput(data);\r\n    //   if (!!result) {\r\n    //     this.onScanned.emit(result);\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  private modeMatchesScannedInputFormat(rawInput: string): boolean {\r\n   return true;\r\n  }\r\n\r\n  private convertRawInput(rawInput: string): string | undefined {\r\n    if(rawInput === '111000000003'){\r\n      return 'DE11100000000'\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit{\n  title = 'pwahost';\n\n  success($event: string) {\n    console.log('success ' + $event);\n  }\n\n  fail($event: any) {\n    console.log('fail ' + $event);\n  }\n\n  ngOnInit(): void {\n    const my: any = window;\n    my.fireStreak = (s:string) => {\n      let asArray = s.split('');\n      let event = (x: string) => {\n        const aa =new KeyboardEvent('keydown', {\n          bubbles: true,\n          cancelable: true,\n          key: x,\n          shiftKey: true,\n        });\n        aa['char'] = x;\n        // aa['keyCode'] =81;\n        return aa;\n      }\n      asArray.forEach(x => {\n        window.dispatchEvent(event(x))\n      });\n      window.dispatchEvent(event('Enter'))\n    };\n  }\n}\n","<h1>\n  hi there\n</h1>\n\n<my-scanner-listener (onScanned)=\"success($event)\" (onScanFailed)=\"fail($event)\">\n</my-scanner-listener>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport {ScannerListenerComponent} from \"./scanner-listener.component\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ScannerListenerComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}